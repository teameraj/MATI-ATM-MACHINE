void addAccountFromFile(struct Account** head)
{
    int cnt = 0;
    FILE* file = fopen("info1.txt", "r"); //the data is written on file and it just needs to be read
   
    fscanf(file, "%d", &cnt);
    if (cnt == 0) //checking if the file has the data
    {
        printf("There is no information in the file!\n");
        fclose(file);
        return;
    }

    struct Account* newAccount;
    struct Account* prev = NULL;
    for (int i = 0; i < cnt; i++) //get information from file and store it into  linked lists
    {
        newAccount = (struct Account*)malloc(sizeof(struct Account));
        fscanf(file, "%d%d%f", &newAccount->id, &newAccount->PIN, &newAccount->balance);
        newAccount->transactionList = NULL;
        newAccount->next = NULL;

        struct Transaction* newTransaction = (struct Transaction*)malloc(sizeof(struct Transaction));
        fscanf(file, "%lf%d", &newTransaction->amount, &newTransaction->paymentMethod);
        newTransaction->next = NULL;
        newAccount->transactionList = newTransaction;

        if (*head == NULL)
        {
            *head = newAccount;
        }
        else
        {
            prev->next = newAccount;
        }
        prev = newAccount;
    }

    fclose(file); //closing the file
}
void updateAccountsFile(struct Account* head) {
    FILE *file=NULL;
     file = fopen("info1.txt", "w");//open the previous file in a different mode
    if (file == NULL) { //check if file opens
        printf("Can't open file for writing!\n"); //show error if file can't open
        return;
    }
    struct Account* currentAccount = head;
    int cnt = 0;

    // Count the number of accounts
    while (currentAccount != NULL) {
        cnt++;
        currentAccount = currentAccount->next;
    }

    // Write the number of accounts to the file
    fprintf(file, "%d\n", cnt);

    // Write the account information to the file
    currentAccount = head;
    while (currentAccount != NULL) {
        fprintf(file, "%d %d %.2f\n", currentAccount->id, currentAccount->PIN, currentAccount->balance);

        struct Transaction* currentTransaction = currentAccount->transactionList;
        while (currentTransaction != NULL) {
            fprintf(file, "%.2lf %d\n", currentTransaction->amount, currentTransaction->paymentMethod);
            currentTransaction = currentTransaction->next;
        }

        currentAccount = currentAccount->next;
    }

    fclose(file); //close the file
}
void withdrawal(struct Account* head, int id, int pin, double amount)
{
    struct Account* currentAccount = head;
    while (currentAccount != NULL)
    {
        if (currentAccount->id == id && currentAccount->PIN == pin)
        {
            if (amount > currentAccount->balance)
            {
                printf("\nThe amount you want to withdraw exceeds the available balance.\n");
                printf("Please enter again the amount you want to withdraw: ");
                scanf("%lf", &amount);
            }
            else if (amount > WITHDRAWL_LIMIT) //check if the amount is larger than limit
            {
                printf("\nError! The amount you entered is larger than the withdrawal limit!\n");
                printf("Please enter again the amount: ");
                scanf("%lf", &amount);
            }
            else
            {
                currentAccount->balance -= amount;
                printf("The withdrawal was completed successfully!\n");
                 updateAccountsFile(head);
            }
            return; // Found the matching account, no need to continue searching
        }
        currentAccount = currentAccount->next;
    }
    printf("No account matching the provided ID and PIN was found.\n");
}

void depositCash(struct Account* head, int id, int pin, double amount)
{
    struct Account* currentAccount = head;
    while (currentAccount != NULL)
    {
        if (currentAccount->id == id && currentAccount->PIN == pin)
        {
            if (amount <= DEPOSIT_LIMIT)
            {
                currentAccount->balance += amount;
                printf("Deposit successful. New balance: %.2lf\n", currentAccount->balance);
            }
            else //show error if amount is larger than deposit limit
            {
                printf("Deposit amount exceeds the limit. Maximum deposit limit: %.2d\n", DEPOSIT_LIMIT);
            }
            return; // Found the matching account, no need to continue searching
        }
        currentAccount = currentAccount->next;
    }
    printf("No account matching the provided ID and PIN was found.\n");
}
void depositCheck(struct Account* head, int id, int pin, double amount)
{
    struct Account* currentAccount = head;
    while (currentAccount != NULL)
    {
        if (currentAccount->id == id && currentAccount->PIN == pin)
        {
            if (amount <= DEPOSIT_LIMIT)
            {
                currentAccount->balance += amount;
                printf("Deposit successful. New balance: %.2lf\n", currentAccount->balance);
            }
            else //show error if the amount is larger than deposit limit
            {
                printf("Deposit amount exceeds the limit. Maximum deposit limit: %.2d\n", DEPOSIT_LIMIT);
            }
            return; // Found the matching account, no need to continue searching
        }
        currentAccount = currentAccount->next;
    }
    printf("No account matching the provided ID and PIN was found.\n");
}
void displayTransactionHistory(struct Transaction* transactionList, int numTransactions)
{
    int count = 0;
    struct Transaction* currentTransaction = transactionList; //point current to the first linked list of transactions
    while (currentTransaction != NULL && count < numTransactions)
    {
        printf("Amount: %.2lf, ", currentTransaction->amount);
        if (currentTransaction->transactionType == 0)
        {
            printf("Transaction Type: Withdrawal, ");
        }
        else
        {
            printf("Transaction Type: Deposit, ");
        }
        if (currentTransaction->paymentMethod == 0)
        {
            printf("Payment Method: Cash\n");
        }
        else
        {
            printf("Payment Method: Check\n");
        }
        currentTransaction = currentTransaction->next;
        count++;
    }
    printf("End of transaction history.\n");
}

void displayAllTransactions(struct Account* head, int id, int pin)
{
    struct Account* currentAccount = head; //point current account to the first account of linked list
    while (currentAccount != NULL)
    {
        if (currentAccount->id == id && currentAccount->PIN == pin)
        {
            printf("\nTransaction History for Account ID: %d\n", currentAccount->id);
            struct Transaction* currentTransaction = currentAccount->transactionList;
            while (currentTransaction != NULL)
            {
                printf("Amount: %.2lf, ", currentTransaction->amount);
                if (currentTransaction->transactionType == 0)
                {
                    printf("Transaction Type: Withdrawal, ");
                }
                else
                {
                    printf("Transaction Type: Deposit, ");
                }
                if (currentTransaction->paymentMethod == 0)
                {
                    printf("Payment Method: Cash\n");
                }
                else
                {
                    printf("Payment Method: Check\n");
                }
                currentTransaction = currentTransaction->next;
            }
            printf("End of transaction history.\n");
        }
        currentAccount = currentAccount->next;
    }
}

void addDepositTransaction(struct Account* account, double amount, int paymentMethod)
{
    struct Transaction* newTransaction = (struct Transaction*)malloc(sizeof(struct Transaction));
    newTransaction->amount = amount;
    newTransaction->paymentMethod = paymentMethod;
    newTransaction->transactionType = 1; // 1 for deposit

    // Inserting the new transaction at the beginning of the transaction list
    newTransaction->next = account->transactionList;
    account->transactionList = newTransaction;
}
